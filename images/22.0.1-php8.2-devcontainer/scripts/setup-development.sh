#!/bin/bash
#
# Dolibarr Development Setup Script
# Initializes the development environment and clones repositories
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEFAULT_DOLIBARR_REPO="https://github.com/Dolibarr/dolibarr.git"
DEFAULT_BRANCH="develop"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_status "🚀 Dolibarr Development Environment Setup"
echo ""

# Check if dolibarr directory exists
if [ -d "./dolibarr" ]; then
    print_warning "Dolibarr directory already exists"
    
    # Check if directory is empty
    if [ -z "$(ls -A ./dolibarr 2>/dev/null)" ]; then
        print_status "Dolibarr directory exists but is empty"
        print_status "Will proceed with cloning..."
        # Remove empty directory so git clone works
        rmdir ./dolibarr
    # Check if it's a git repository
    elif [ -d "./dolibarr/.git" ]; then
        cd dolibarr
        CURRENT_REMOTE=$(git remote get-url origin 2>/dev/null || echo "")
        CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "")
        
        print_status "Current repository: $CURRENT_REMOTE"
        print_status "Current branch: $CURRENT_BRANCH"
        cd ..
    else
        print_error "Directory exists but is not a Git repository"
        echo "Please remove ./dolibarr directory and run this script again"
        exit 1
    fi
else
    # Ask user for repository URL
    echo "Enter your Dolibarr repository URL (or press Enter for main repository):"
    echo "Example: https://github.com/YOUR-USERNAME/dolibarr.git"
    read -p "Repository URL: " REPO_URL
    
    if [ -z "$REPO_URL" ]; then
        REPO_URL="$DEFAULT_DOLIBARR_REPO"
        print_status "Using main Dolibarr repository"
    else
        print_status "Using personal fork: $REPO_URL"
    fi
    
    # Ask for branch
    read -p "Branch to checkout (default: $DEFAULT_BRANCH): " BRANCH
    if [ -z "$BRANCH" ]; then
        BRANCH="$DEFAULT_BRANCH"
    fi
    
    print_status "Cloning Dolibarr repository..."
    git clone -b "$BRANCH" "$REPO_URL" dolibarr
    
    # If it's a fork, add upstream
    if [ "$REPO_URL" != "$DEFAULT_DOLIBARR_REPO" ]; then
        print_status "Adding upstream remote..."
        cd dolibarr
        git remote add upstream "$DEFAULT_DOLIBARR_REPO"
        git fetch upstream
        print_success "Added upstream remote: $DEFAULT_DOLIBARR_REPO"
        cd ..
    fi
    
    print_success "Repository cloned successfully"
fi

# Create development configuration if it doesn't exist
if [ ! -f "./dolibarr/htdocs/conf/conf.php" ]; then
    print_status "Creating development configuration..."
    mkdir -p ./dolibarr/htdocs/conf
    
    cat > ./dolibarr/htdocs/conf/conf.php << 'EOF'
<?php
// Dolibarr Development Configuration
// Auto-generated by development container setup

$dolibarr_main_url_root='http://localhost:8080';
$dolibarr_main_document_root='/var/www/html/htdocs';
$dolibarr_main_url_root_alt='/custom';
$dolibarr_main_document_root_alt='/var/www/html/custom';
$dolibarr_main_data_root='/var/www/documents';

// Database
$dolibarr_main_db_host='db';
$dolibarr_main_db_port='3306';
$dolibarr_main_db_name='dolibarr';
$dolibarr_main_db_prefix='llx_';
$dolibarr_main_db_user='dolibarr';
$dolibarr_main_db_pass='dolibarr_dev_password';
$dolibarr_main_db_type='mysqli';
$dolibarr_main_db_character_set='utf8mb4';
$dolibarr_main_db_collation='utf8mb4_unicode_ci';

// Development settings
$dolibarr_main_authentication='dolibarr';
$dolibarr_main_prod=0; // Development mode
$dolibarr_main_force_https=0;
$dolibarr_nocsrfcheck=0;

// Security
$dolibarr_main_instance_unique_id='dev_instance_'.md5(__FILE__);
$dolibarr_main_cookie_cryptkey='dev_change_in_production_'.md5(__FILE__);

// Development debugging
if (empty($dolibarr_main_db_encryption)) $dolibarr_main_db_encryption=0;
EOF
    
    print_success "Development configuration created"
fi

# Set up Git hooks if in a repository
if [ -d "./dolibarr/.git" ]; then
    print_status "Setting up Git hooks..."
    cd dolibarr
    ../scripts/setup-git-hooks.sh
    cd ..
fi

# Create PHPUnit configuration
if [ ! -f "./dolibarr/phpunit.xml" ]; then
    print_status "Creating PHPUnit configuration..."
    
    cat > ./dolibarr/phpunit.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<phpunit
    bootstrap="test/bootstrap.php"
    colors="true"
    convertErrorsToExceptions="true"
    convertNoticesToExceptions="false"
    convertWarningsToExceptions="false"
    processIsolation="false"
    stopOnFailure="false"
    backupGlobals="false"
    backupStaticAttributes="false"
    verbose="true">
    
    <testsuites>
        <testsuite name="Dolibarr Test Suite">
            <directory>./test/phpunit/</directory>
        </testsuite>
    </testsuites>
    
    <filter>
        <whitelist processUncoveredFilesFromWhitelist="true">
            <directory suffix=".php">./htdocs</directory>
            <exclude>
                <directory>./htdocs/includes</directory>
                <directory>./vendor</directory>
            </exclude>
        </whitelist>
    </filter>
    
    <logging>
        <log type="coverage-html" target="test/coverage/html"/>
        <log type="coverage-clover" target="test/coverage/clover.xml"/>
    </logging>
</phpunit>
EOF
    
    print_success "PHPUnit configuration created"
fi

# Create helpful development scripts
print_status "Creating development helper scripts..."

cat > ./run-tests.sh << 'EOF'
#!/bin/bash
# Run Dolibarr tests
echo "🧪 Running PHPUnit tests..."
docker exec dolibarr-dev-app bash -c "cd /var/www/html && phpunit --configuration phpunit.xml"
EOF

cat > ./check-code-quality.sh << 'EOF'
#!/bin/bash
# Check code quality for Dolibarr
echo "🔍 Running code quality checks..."

echo "📋 Running PHPCS (Code Sniffer)..."
docker exec dolibarr-dev-app dolibarr-dev cs-check

echo "🔬 Running PHPStan (Static Analysis)..."
docker exec dolibarr-dev-app dolibarr-dev stan
EOF

cat > ./fix-code-style.sh << 'EOF'
#!/bin/bash
# Fix code style issues
echo "🔧 Fixing code style issues..."
docker exec dolibarr-dev-app dolibarr-dev cs-fix
EOF

# Make scripts executable
chmod +x ./run-tests.sh
chmod +x ./check-code-quality.sh
chmod +x ./fix-code-style.sh

print_success "Development helper scripts created"

# Display final information
echo ""
print_success "🎉 Dolibarr Development Environment Setup Complete!"
echo ""
echo "📋 What's been set up:"
echo "  ✅ Dolibarr repository cloned/verified"
echo "  ✅ Development configuration created"
echo "  ✅ Git hooks installed"
echo "  ✅ PHPUnit configuration ready"
echo "  ✅ Helper scripts created"
echo ""
echo "🚀 Next steps:"
echo "  1. Start the development environment:"
echo "     docker-compose up -d"
echo ""
echo "  2. Open VS Code and select 'Reopen in Container'"
echo ""
echo "  3. Access your development environment:"
echo "     • Dolibarr: http://localhost:8080"
echo "     • phpMyAdmin: http://localhost:8081"
echo "     • MailHog: http://localhost:8025"
echo ""
echo "💡 Available helper commands:"
echo "  • ./run-tests.sh - Run PHPUnit tests"
echo "  • ./check-code-quality.sh - Check code quality"
echo "  • ./fix-code-style.sh - Fix code style issues"
echo "  • docker exec dolibarr-dev-app dolibarr-dev - Inside container helper"
echo ""
echo "Happy coding! 🎯"